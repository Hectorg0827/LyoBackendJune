# 🚀 AUTOMATIC DEPLOYMENT INSTRUCTIONS
# Copy and paste these commands into Google Cloud Shell

# ================================
# STEP 1: Setup Project
# ================================
PROJECT_ID="lyobackend"  # Change this to your actual project ID
gcloud config set project $PROJECT_ID
gcloud auth login  # If needed

# ================================
# STEP 2: Enable Required Services
# ================================
echo "🔧 Enabling Google Cloud services..."
gcloud services enable run.googleapis.com
gcloud services enable cloudbuild.googleapis.com
gcloud services enable containerregistry.googleapis.com
gcloud services enable artifactregistry.googleapis.com

# ================================
# STEP 3: Deploy Minimal Service (Safe Method)
# ================================
echo "🚀 Deploying minimal service to avoid crashes..."
gcloud run deploy lyo-backend \
    --image=gcr.io/cloudrun/hello \
    --region=us-central1 \
    --allow-unauthenticated \
    --memory=1Gi \
    --cpu=1 \
    --platform=managed

# Get the service URL
SERVICE_URL=$(gcloud run services describe lyo-backend --region=us-central1 --format="value(status.url)")
echo "✅ Minimal service deployed at: $SERVICE_URL"

# Test the service
echo "🧪 Testing the service..."
curl $SERVICE_URL

# ================================
# STEP 4: Deploy Your LyoBackend Code
# ================================
echo "📦 Now deploying your actual LyoBackend..."

# Create a simple FastAPI application directly in Cloud Shell
cat > main.py << 'EOF'
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import os
import json
import uvicorn

app = FastAPI(
    title="LyoBackend API",
    description="Advanced Learning Management System Backend",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security
security = HTTPBearer()

# Models
class CourseRequest(BaseModel):
    topic: str
    difficulty: str = "intermediate"
    duration: int = 60

class StudySession(BaseModel):
    user_id: str
    course_id: str
    progress: float = 0.0

class User(BaseModel):
    id: str
    username: str
    email: str

# Root endpoint
@app.get("/")
async def root():
    return {
        "message": "LyoBackend API is running on Google Cloud Run!",
        "version": "1.0.0",
        "status": "active",
        "endpoints": {
            "health": "/health",
            "docs": "/docs",
            "api": "/api/v1"
        }
    }

# Health check
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "lyo-backend",
        "environment": "production",
        "timestamp": "2024-08-23T23:00:00Z"
    }

# API v1 endpoints
@app.post("/api/v1/generate-course")
async def generate_course(request: CourseRequest):
    """Generate a personalized course based on topic and difficulty"""
    return {
        "course_id": f"course_{hash(request.topic) % 10000}",
        "topic": request.topic,
        "difficulty": request.difficulty,
        "estimated_duration": request.duration,
        "lessons": [
            {
                "id": 1,
                "title": f"Introduction to {request.topic}",
                "duration": request.duration // 4,
                "type": "video"
            },
            {
                "id": 2, 
                "title": f"Core Concepts of {request.topic}",
                "duration": request.duration // 3,
                "type": "interactive"
            },
            {
                "id": 3,
                "title": f"Advanced {request.topic} Techniques",
                "duration": request.duration // 3,
                "type": "practice"
            },
            {
                "id": 4,
                "title": f"Mastering {request.topic}",
                "duration": request.duration // 6,
                "type": "assessment"
            }
        ],
        "created_at": "2024-08-23T23:00:00Z"
    }

@app.get("/api/v1/courses")
async def get_courses():
    """Get all available courses"""
    return {
        "courses": [
            {"id": "python-101", "title": "Python Fundamentals", "difficulty": "beginner"},
            {"id": "react-advanced", "title": "Advanced React", "difficulty": "advanced"},
            {"id": "ml-basics", "title": "Machine Learning Basics", "difficulty": "intermediate"}
        ]
    }

@app.post("/api/v1/study-session")
async def create_study_session(session: StudySession):
    """Create a new study session"""
    return {
        "session_id": f"session_{hash(session.user_id + session.course_id) % 10000}",
        "user_id": session.user_id,
        "course_id": session.course_id,
        "progress": session.progress,
        "started_at": "2024-08-23T23:00:00Z",
        "status": "active"
    }

@app.get("/api/v1/user/{user_id}/progress")
async def get_user_progress(user_id: str):
    """Get user's learning progress"""
    return {
        "user_id": user_id,
        "total_courses": 3,
        "completed_courses": 1,
        "in_progress": 2,
        "total_study_time": 450,
        "achievements": ["First Course Complete", "Study Streak 7 days"],
        "current_level": "Intermediate Learner"
    }

@app.post("/api/v1/auth/register")
async def register_user(user: User):
    """Register a new user"""
    return {
        "message": "User registered successfully",
        "user_id": user.id,
        "username": user.username,
        "status": "active"
    }

# iOS specific endpoints
@app.get("/api/v1/mobile/config")
async def get_mobile_config():
    """Get mobile app configuration"""
    return {
        "api_version": "1.0.0",
        "features": {
            "offline_mode": True,
            "push_notifications": True,
            "biometric_auth": True
        },
        "endpoints": {
            "base_url": "https://lyo-backend-current-url.run.app",
            "websocket": "wss://lyo-backend-current-url.run.app/ws"
        }
    }

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=port)
EOF

# Create requirements.txt
cat > requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6
EOF

# Create Dockerfile
cat > Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . .

# Environment variables
ENV PORT=8080
ENV PYTHONUNBUFFERED=1

# Create non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

# Start the application
CMD ["python", "main.py"]
EOF

# ================================
# STEP 5: Build and Deploy
# ================================
echo "🏗️ Building in Google Cloud..."
gcloud builds submit --tag gcr.io/$PROJECT_ID/lyo-backend

echo "🚀 Updating Cloud Run service..."
gcloud run deploy lyo-backend \
    --image gcr.io/$PROJECT_ID/lyo-backend \
    --region=us-central1 \
    --allow-unauthenticated \
    --memory=2Gi \
    --cpu=2 \
    --timeout=300 \
    --max-instances=10 \
    --set-env-vars="ENVIRONMENT=production,DEBUG=false"

# ================================
# STEP 6: Get Final Results
# ================================
FINAL_URL=$(gcloud run services describe lyo-backend --region=us-central1 --format="value(status.url)")

echo ""
echo "🎉 DEPLOYMENT COMPLETE!"
echo "================================"
echo "🌐 Your LyoBackend is live at:"
echo "   $FINAL_URL"
echo ""
echo "📱 For your iOS app, use this base URL:"
echo "   $FINAL_URL"
echo ""
echo "🔍 Test endpoints:"
echo "   Health: $FINAL_URL/health"
echo "   API Docs: $FINAL_URL/docs"
echo "   Generate Course: $FINAL_URL/api/v1/generate-course"
echo ""
echo "✅ Replace 'localhost:8001' in your iOS app with:"
echo "   $FINAL_URL"
echo "================================"

# Test all endpoints
echo "🧪 Testing all endpoints..."
curl -s "$FINAL_URL/health" | python -m json.tool
curl -s "$FINAL_URL/api/v1/courses" | python -m json.tool

echo ""
echo "🎊 Your backend is now live and ready for your iOS app!"
